{
  "name": "Smart Email Auto-Responder",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression", 
              "expression": "*/5 * * * *"
            }
          ]
        }
      },
      "name": "Check Every 5 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Search for unread emails from VIP contacts\nconst tool = 'gmail_search_emails';\nconst args = {\n  query: 'is:unread (from:boss@company.com OR from:client@important.com OR label:VIP)',\n  maxResults: 10\n};\n\nreturn [{\n  json: {\n    tool: tool,\n    args: args\n  }\n}];"
      },
      "name": "Search VIP Emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "functionCode": "const emails = $json.result.emails;\n\nif (!emails || emails.length === 0) {\n  return [{\n    json: {\n      message: 'No VIP emails found',\n      skip: true\n    }\n  }];\n}\n\nconst responses = [];\n\nfor (const email of emails) {\n  const subject = email.payload.headers.find(h => h.name === 'Subject')?.value || '';\n  const from = email.payload.headers.find(h => h.name === 'From')?.value || '';\n  const snippet = email.snippet || '';\n  \n  // Determine response type based on content\n  let responseTemplate = '';\n  \n  if (snippet.toLowerCase().includes('urgent') || subject.toLowerCase().includes('urgent')) {\n    responseTemplate = 'urgent';\n  } else if (snippet.toLowerCase().includes('meeting') || subject.toLowerCase().includes('schedule')) {\n    responseTemplate = 'meeting';\n  } else if (snippet.toLowerCase().includes('question') || subject.toLowerCase().includes('?')) {\n    responseTemplate = 'question';\n  } else {\n    responseTemplate = 'general';\n  }\n  \n  responses.push({\n    messageId: email.id,\n    from: from,\n    subject: subject,\n    responseTemplate: responseTemplate,\n    originalEmail: email\n  });\n}\n\nreturn responses.map(response => ({ json: response }));"
      },
      "name": "Analyze Emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "functionCode": "const templates = {\n  urgent: {\n    subject: 'Re: {{subject}} - Immediate Attention',\n    body: 'Thank you for your urgent message. I have received it and will respond within the next 2 hours. If this requires immediate attention, please call me directly.\\n\\nBest regards'\n  },\n  meeting: {\n    subject: 'Re: {{subject}} - Meeting Request Received',\n    body: 'Thank you for your meeting request. I will review my calendar and respond with available times within 24 hours.\\n\\nBest regards'\n  },\n  question: {\n    subject: 'Re: {{subject}} - Question Received',\n    body: 'Thank you for your question. I will research this and provide a comprehensive response within 24-48 hours.\\n\\nBest regards'\n  },\n  general: {\n    subject: 'Re: {{subject}} - Message Received',\n    body: 'Thank you for your email. I have received it and will respond within 2-3 business days.\\n\\nBest regards'\n  }\n};\n\nconst template = templates[$json.responseTemplate] || templates.general;\nconst responseSubject = template.subject.replace('{{subject}}', $json.subject);\n\nconst sendEmailArgs = {\n  to: $json.from,\n  subject: responseSubject,\n  body: template.body\n};\n\nconst markReadArgs = {\n  messageId: $json.messageId,\n  removeLabelIds: ['UNREAD'],\n  addLabelIds: ['Label_AutoResponded'] // Assuming this label exists\n};\n\nreturn [{\n  json: {\n    sendEmail: sendEmailArgs,\n    markRead: markReadArgs,\n    originalMessageId: $json.messageId\n  }\n}];"
      },
      "name": "Generate Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "functionCode": "// Send the auto-response\nconst sendResult = {\n  tool: 'gmail_send_email',\n  args: $json.sendEmail\n};\n\n// Mark as read and add auto-responded label\nconst modifyResult = {\n  tool: 'gmail_modify_email',\n  args: $json.markRead\n};\n\nreturn [{\n  json: {\n    sendResult: sendResult,\n    modifyResult: modifyResult,\n    processedMessageId: $json.originalMessageId\n  }\n}];"
      },
      "name": "Execute Actions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "Check Every 5 Minutes": {
      "main": [
        [
          {
            "node": "Search VIP Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search VIP Emails": {
      "main": [
        [
          {
            "node": "Analyze Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Emails": {
      "main": [
        [
          {
            "node": "Generate Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Response": {
      "main": [
        [
          {
            "node": "Execute Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}